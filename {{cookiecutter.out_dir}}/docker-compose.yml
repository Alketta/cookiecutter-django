{%- set db_tag = 'post' in cookiecutter.db_mode and 'postgres' or cookiecutter.db_mode -%}
version: '3.7'
x-images:
  env: &env {env_file: [.env, docker.env]}
  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    # latest image is only used in prod (without dev & test tools)
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    environment: &django_env
      DJANGO_WSGI: "${DJANGO_WSGI:-{{cookiecutter.django_project_name}}.wsgi}"
      EXTRA_USER_DIRS: ""
      GUNICORN_CLASS: "${GUNICORN_CLASS:-{{cookiecutter.gunicorn_class}}}"
      SECRET_KEY: "${SECRET_KEY:-ChangeThatSuperSecret}"
{% if cookiecutter.with_celery %}      DJANGO_CELERY: "${DJANGO_CELERY:-{{cookiecutter.django_project_name}}.celery:app}"
      DJANGO_CELERY_BROKER: "${DJANGO_CELERY_BROKER:-{{cookiecutter.celery_broker}}}"
      DJANGO_CELERY_HOST: "${DJANGO_CELERY_HOST:-celery-broker}"
{% endif %}    depends_on:
    - db
{% if cookiecutter.cache_system%}    - "{{cookiecutter.cache_system}}"{%endif%}
    - setup-{{db_tag}}
    working_dir: /code/src
    command:
    - /bin/bash
    - '-c'
    - >-
      : \
      && POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      && dockerize -wait http://setup-{{db_tag}} -timeout $${POSTGRES_STARTUP_TIMEOUT}
      && /init.sh
    volumes:
      - ./sys/scripts:/code/sys/scripts
      {%- if not cookiecutter.remove_cron %}
      - ./sys/etc/cron.d:/code/sys/etc/cron.d/
      {%- endif %}
      - ./src/{{cookiecutter.django_settings.replace('.', '/')}}/instances:/code/src/{{cookiecutter.django_settings.replace('.', '/')}}/instances
      - mediafiles:/code/public/media
      - statics:/code/public/static
      - logs:/logs/
      - ./data:/code/data
{% if cookiecutter.with_ftp %}      - "ftp-root:${DJANGO__FTP_ROOT:-/ftp}"{% endif %}
{% if cookiecutter.with_ftp %}
  ftp: &ftp
    <<: [ *env ]
    image: corpusops/pureftpd
    environment: &ftp_env
      FTP_USER_HOME: "${DJANGO__FTP_ROOT:-/ftp}"
      FTP_USER_UID: "${DJANGO__USER_UID:-1000}"
      FTP_USER_PASS: "${DJANGO__FTP_PASSWORD:-secret1324510}"
      FTP_USER_NAME: "${DJANGO__FTP_USER:-ftp}"
      ADDED_FLAGS: "-O w3c:/var/log/pure-ftpd/transfer.log"
      FTP_MAX_CONNECTIONS: 50
      FTP_MAX_CLIENTS: 50
{% endif %}
services:
{% if cookiecutter.with_ftp -%}
# has only to be reachable from within the docker network (no passive mode !)
  ftp-int:
    <<: [ *ftp ]
    environment:
      <<: [ *ftp_env ]
      PUBLICHOST: "${DJANGO__FTP_INTERNAL_PUBLICHOST-}"
      NO_PASSIVE_MODE: "1"
    volumes:
    - "ftp-root:${DJANGO__FTP_ROOT:-/ftp}"
    - ftp-pw:/etc/pure-ftpd/passwd
    - ftp-ssl:/etc/ssl/private
    - ftp-log-int:/var/log/pure-ftpd
  ftp:
    <<: [ *ftp ]
    environment:
      <<: [ *ftp_env ]
      FTP_PASSIVE_PORTS: "${DJANGO__FTP_PORT_RANGE:-{{cookiecutter.ftp_port_range}}}"
      PUBLICHOST: "${DJANGO__FTP_PUBLICHOST-}"
    ports:
    - "${DJANGO__FTP_LISTEN:-0.0.0.0}:${DJANGO__FTP_PORT:-21}:21"
    - "${DJANGO__FTP_LISTEN:-0.0.0.0}:${DJANGO__FTP_PORT_RANGE:-{{cookiecutter.ftp_port_range.replace(':', '-')}}}:${DJANGO__FTP_PORT_RANGE:-{{cookiecutter.ftp_port_range.replace(':', '-')}}}"
    volumes:
    - "ftp-root:${DJANGO__FTP_ROOT:-/ftp}"
    - ftp-pw:/etc/pure-ftpd/passwd
    - ftp-ssl:/etc/ssl/private
    - ftp-log:/var/log/pure-ftpd
{%- endif %}
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
{% if cookiecutter.cache_system%}  {{cookiecutter.cache_system}}:
    <<: [ *env ]
    image: "{{cookiecutter.cache_image}}"
    hostname: {{cookiecutter.cache_system}}
    {% if cookiecutter.cache_system in ['redis'] %}
    volumes:
      - 'redis:/data'
        {% endif %}
{%endif %}
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    <<: [ *env ]
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
      - {{cookiecutter.app_type}}
    volumes:
      - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      - mediafiles:/code/public/media/:ro
      - statics:/code/public/static/
      - logs:/logs/
      - nginx-certs:/certs
      - nginx-htpasswd:/etc/htpasswd
      - ./data:/code/data
      # retrocompat
      - mediafiles:/public/media/:ro
      - statics:/public/static/
    command:
      - sh
      - '-ec'
      - |-
        sed -i -re "s/user\s+.*;/user root;/g" /etc/nginx/nginx.conf
        export DJANGO__HTTP_PROTECT_USER=$${DJANGO__HTTP_PROTECT_USER:-root}
        export DJANGO__HTTP_PROTECT_PASSWORD=$${DJANGO__HTTP_PROTECT_PASSWORD-}
        : retrocompat
        for i in $$(find /etc/htpasswd -type f -maxdepth 1);do ln -sfv $$i /etc/htpasswd-$$(basename $$i);done
        touch /etc/htpasswd/protect
        chmod 644 /etc/htpasswd/protect
        if [ "x$$DJANGO__HTTP_PROTECT_PASSWORD" != "x" ];then
          echo "/ htpasswd:">&2
          echo "$$DJANGO__HTTP_PROTECT_PASSWORD"\
          | htpasswd -bim /etc/htpasswd-protect "$$DJANGO__HTTP_PROTECT_USER"
        fi
        v=/etc/nginx/conf.d/default.conf
        frep $${v}.template:$${v} --overwrite
        exec /bin/supervisord.sh
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx /etc/supervisor.d/rsyslog
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
  {%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *django_env ]
      IMAGE_MODE: cron
    depends_on:
    - {{cookiecutter.app_type}}
    volumes:
{% if cookiecutter.with_ftp %}     - "ftp-root:${DJANGO__FTP_ROOT:-/ftp}"{% endif %}
    - ./sys/scripts:/code/sys/scripts
    {%- if not cookiecutter.remove_cron %}
    - ./sys/etc/cron.d:/code/sys/etc/cron.d/
    {%- endif %}
    - ./src/{{cookiecutter.django_settings.replace('.', '/')}}/instances:/code/src/{{cookiecutter.django_settings.replace('.', '/')}}/instances
    - mediafiles:/code/public/media
    - statics:/code/public/static
    - logs:/logs/
    - cronlogs:/var/log
    - ./data:/code/data
  {%-endif%}
{% if cookiecutter.with_celery %}  celery-broker:
    <<: [ *env ]
    image: "{{cookiecutter['{0}_image'.format(cookiecutter.celery_broker)]}}"
    {% if cookiecutter.celery_broker in ['redis', 'rabbitmq'] -%}
    volumes:
    - celery{{cookiecutter.celery_broker}}:{% if cookiecutter.celery_broker in ['rabbitmq']%}/var/lib/{{cookiecutter.celery_broker}}{%else%}/data{%endif%}:rw
    {%- endif %}
  celery-beat: &celery
    <<: [ *django ]
    environment:
      <<: [ *django_env ]
      IMAGE_MODE: celery_beat
    depends_on: [db, celery-broker, setup-{{db_tag}}]
  celery-worker:
    <<: [ *celery ]
    environment:
      <<: [ *django_env ]
      IMAGE_MODE: celery_worker
{% endif -%}
{% if db_tag == 'postgres' %}  setup-postgres:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if cookiecutter.with_postgist_test and 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@$$POSTGRES_HOST:$$POSTGRES_PORT/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{% endif %}
volumes:
  postgresql:
{% if cookiecutter.cache_system in ['redis']%}  {{cookiecutter.cache_system}}:{%endif%}
  nginx-htpasswd:
  nginx-certs:
  mediafiles:
  statics:
    name: "${{'{'}}{{cookiecutter.app_type.upper()}}_NAME}-statics-${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}"
    external: false
  logs:
  mails:
  cronlogs:
  {%if cookiecutter.with_celery%}celery{{cookiecutter.celery_broker}}:{%endif%}
{% if cookiecutter.with_ftp %}
  ftp-root:
  ftp-log:
  ftp-log-int:
  ftp-pw:
  ftp-ssl:
{% endif -%}
